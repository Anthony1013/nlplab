For example , in the sentence “ you can not attach an ActionListener without having to rewrite the controller and the view , ” “ the controller ” and “ the view ” refer to other parts of the discussion . 
As such , this sentence is hard to understand without additional context . 
Although there is a small percentage ( about 11 % ) of false‐positive instances , Disca distills 146 correct API negative caveats that can drastically augment the 10 official API documents . 
Motivation : RQ4 reveals that Disca greatly augments the official API documentation . 
However , readers may not have an intuitive impression for these distilled caveats . 
We now show the importance of the distilled API negative caveats through intuitive examples . 
Approach : To answer this research question , we conducted a case study to present the distilled API negative caveats of four Java API types . 
We selected three API types in Table 2 : javax.swing.JFrame , java.awt.event.ActionLi‐stener , and java.math.BigDecimal , which are mentioned frequently , moderately , and relatively infrequently . 
We also include java.util.HashMap , which has been used to illustrate our approach throughout our discussion . 
For the four API types , Disca detects 4 , 6 , 5 , and 3 term‐communities , respectively . 
For each term‐community , we list the top‐1 ranked API negative caveat as a representative caveat in Table 8 . 
Results : For java.util.HashMap , its long official documentation mentions three negative caveats related to element order , multiple threads synchronization , and comparable element . 
Only the sentence for multiple threads is in bold text . 
Compared with the lengthy official documentation , the API negative caveats ( 1.1 ) , ( 1.2 ) , and ( 1.3 ) in Table 8 show that Disca helps to reveal hard‐to‐notice API negative caveats . 
Furthermore , Disca augments the official documentation with caveat ( 1.4 ) about multiple values for the same key . 
This may seem natural , but is often overlooked . 
Making it explicit provides an important reminder for novice developers . 
For javax.swing.JFrame , all the mined API negative caveats by Disca do not exist in its Javadoc . 
Caveats ( 2.1 ) and ( 2.2 ) caution users about not extending JFrame and JFrame being not focusable . 
Moreover , they give alternative solutions at the same time . 
Caveat ( 2.3 ) emphasizes that JFrame has no paintComponent method . 
Caveats ( 2.4 ) , ( 2.5 ) , and ( 2.6 ) are on the issues related to setting JFrame visible , validating JFrame , and setting JFrame size , respectively . 
These API negative caveats are difficult to document by API designers , because they mainly emerge from misuse in practice . 
For java.awt.event.ActionListener , its Javadoc does not mention any API negative caveats . 
Disca distills five negative caveats . 
Caveats ( 3.1 ) and ( 3.2 ) not only caution users that they can not add ActionListener to JFrame or JPanel but also explain the reason behind . 
Caveats ( 3.2 ) , ( 3.3 ) , and ( 3.5 ) are good but implicit coding practices when implementing ActionListener . 
It is infeasible for API designers to take all these aspects into account when documenting API , because these API negative caveats can only be accumulated in practice . 
For java.math.BigDecimal , although Disca does not find API negative caveat regarding round mode of BigDecimal , it finds three other negative caveats . 
Caveat ( 4.1 ) warns developers that “ BigDecimal is not a primitive type . 
” Similarly , caveats ( 4.2 ) and ( 4.3 ) provide two important use cautions about “ fixed length decimal ” and “ autoboxing . 
” These to‐be‐avoided use contexts are hard to foresee . 
