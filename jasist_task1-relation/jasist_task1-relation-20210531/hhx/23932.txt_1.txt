Accelerated by the popularity of smart devices , the mobile application ( or app for short ) market is growing explosively . 
For instance , the Apple App Store provides more than one million apps in 24 categories for users in 155 countries around the world.11 http : //www.apple.com/pr/library/2014/01/07App‐Store‐Sales‐Top‐10‐Billion‐in‐2013.html Although such growth has created huge economic opportunities for app developers and technology companies , and has also brought great convenience to users by providing countless useful apps , the market is facing a big problem of “ information overload. ” On one hand , tens of thousands of new apps are continuously being released in app stores , but most of them remain unknown to users searching via keyword . 
on the other hand , users struggle to find the apps they need in such crowded app stores ( B. Liu et al. , 2015 ; Q. Liu , Ma , Chen , & Xiong , 2013 ) . 
Therefore , effective mechanisms that enable precise app marketing and facilitate new app discovery , are essential for both developers and users . 
To alleviate the information overload problem , many industry solutions have been proposed in traditional E‐Commence domains . 
Among them , Recommender Systems ( RSs ) stand out as the most widely used technique in practice . 
According to Hosanagar , Fleder , Lee , and Buja ( 2013 ) , 35 % of Amazon 's sales and 60 % of Netflix 's sales originate from their RSs . 
It is clear how important RSs are to the retailers . 
Even a small improvement in the accuracy of RSs would make a big difference to their revenues . 
Although the general goal of mobile app recommendation is similar to goals in traditional domains—to guide users to items that are relevant to their interests , mobile apps have unique features that make the solutions in traditional domains less effective in the app domain . 
One of the most important characteristics of mobile app selection is that it is based more on a combination of the users ’ functional and nonfunctional requirements for mobile apps , than on the users ’ general tastes . 
The functional aspect of user requirements refers to the functionalities provided by the apps and needed by the user , such as weather forecast and navigation ; the nonfunctional aspect is more about the quality‐relevant features of the apps , such as ease of use , UI design , power consumption , etc . 
To generate accurate app recommendations , it is very important to differentiate and fully consider the two types of user requirements , but this has not attracted sufficient attention from recommendation research . 
The most widely used recommendation techniques in traditional domains : Collaborative Filtering ( CF ; Sarwar , Karypis , Konstan , & Reidl , 2001 ) and Content‐based Filtering ( CB ; Pazzani & Billsus , 2007 ) , usually generate recommendations based on user ratings . 
In the app domain , however , rating values indicate more about users ’ evaluation of the nonfunctional aspects of the app , but can hardly reflect the users ’ functional requirements . 
For example , even if a user gives a very low rating to an app providing the weather forecast , we can only say the user is not satisfied with this app ( maybe because it consumes too much power ) , but we can not deny the fact that this user needs the functionality of weather forecast . 
When applied in the app domain , traditional techniques fail to reveal the detailed functionalities inside apps , and lack the ability to capture users ’ functional requirements , which may worsen the accuracy of recommendations . 
Moreover , most existing techniques tend to recommend similar items , so the diversity of the recommendations generated by these methods is usually low ( Adomavicius & Tuzhilin , 2005 ) . 
A similar‐recommendation strategy may work in certain domains . 
For instance , a user who likes the movie Titanic may be glad to watch another romantic movie similar to Titanic ; however , if a user has installed an app providing particular functionality , for example , weather forecast , he or she needs no more similar apps with the same functionality of weather forecast , unless they provide additional functionalities . 
If existing recommendation techniques are directly applied in the app domain without paying attention to users ’ functional requirements , users may end up with receiving a mass of redundant app recommendations providing similar functionalities . 
Recent research has paid increased attention to mobile app recommendation . 
However , the functional aspects of user requirements for mobile apps have received scant attention from researchers , and there has been no reported work on mobile app recommendation trying to address the redundancy problem . 
To bridge this gap , in this research , we extend our previous work ( Xu , Dutta , & Datta , 2014 ) , and propose a functionality‐based recommendation solution that is able to provide more accurate and more diverse app recommendations by drilling down into the detailed functionalities of the apps . 
Our work is among the first to consider the functional aspect of user requirements in mobile app recommendation . 
To achieve this goal , we propose extracting app functionalities from textual user reviews and develop a graph‐based approach that enables functionality‐based app recommendation . 
The results of experiments conducted on a real‐world mobile app data set show that our proposed method outperforms other commonly used methods in terms of stability against data sparsity , ranking accuracy in top N recommendations , overall ranking correctness and recommendation diversity . 
In particular , our method doubles the recall value of the second‐best method under an extremely sparse setting , increases the overall ranking accuracy of the second‐best method by 14.27 % , and retains a high diversity of 0.99 . 
The remainder of this article is organized as follows : first we review related research . 
Next , we describe the intuition behind our proposed solution and provide an overview followed by a more detailed elaboration . 
Then we evaluate our solution and present the results of our evaluation . 
Finally , we discuss the contribution of our work to the field and possibilities for further work . 
Recently , researchers have started paying attention to mobile app recommendation , and an increasing amount of research on app recommendation is being done . 
In the following , we will review related work on both traditional consumer product domains and mobile app domain . 
We also discuss related work on page‐rank based methods , which will be adapted in our method to discover new functionalities for users . 
The recommendation research in traditional consumer product domains mostly belongs to two main streams , that is , CF and CB . 
CF has been explored in‐depth during the last 10 years and represents the most popular recommendation algorithm . 
The basic assumption of CF is that people who have shared the same taste in some items in the past are more likely to feel similarly towards other items in the future . 
Following this assumption , two types of CF algorithms have been proposed , that is , user‐based ( UCF ; Resnick , Iacovou , Suchak , Bergstorm , & Riedl , 1994 ) and item‐based ( ICF ; Sarwar et al. , 2001 ) , both of which work on the same basic principal . 
First the neighborhood relationship is built by measuring the similarity ( typically cosine similarity or Pearson correlation ) between users or items based on their rating vectors , then the average ratings from the neighborhoods weighted by their similarities are used to predict the missing ratings . 
To alleviate the data sparsity problem that is a major limitation of the traditional CF methods , latent factor models such as Nonnegative Matrix Factorization ( NMF ; Lee & Seung , 1999 ) and Singular Value Decomposition ( SVD ; Paterek , 2007 ) comprise alternative approaches to CF by transforming both items and users to the same latent factor space , which try to explain ratings by characterizing both users and items on the latent factors that are automatically inferred from user feedback . 
CF methods are rating‐centric and lack the ability to capture users ’ functional requirements when applied in apps domain , which is a significant drawback addressed by our method . 
CB recommends items that are similar to what the target user has liked in the past . 
In a typical CB system , the interests of every user are represented as a structured profile that is constructed by analyzing the content of items rated by this user , and recommendations are generated by comparing the content similarities between item attributes and user profiles ( Pazzani & Billsus , 2007 ) . 
CB generates recommendations based on item content ; therefore , it has an advantage in recommending new items for which no user preference data is available . 
CB works well in traditional domains like books , music , movies etc . 
However , in the apps domain , CB is no longer effective because users do not need similar apps with overlapping functionalities . 
Although our proposed method also employs content information of the apps ( i.e. , apps ’ functionalities ) , the logic of generating recommendations is different . 
We emphasize users ’ functional requirements and aim at recommending apps with new functionalities needed by the users , addressing the redundancy problem . 
We also note that there are a few studies that develop utility‐based recommender systems , for example , Spiekermann and Paraschiv ( 2002 ) , Yi and Deng ( 2009 ) , and Felfernig , Mandl , Schippel , Schubert , and Teppan ( 2010 ) . 
Such systems recommend items by constructing a utility‐function to match users ’ stated preferences over all attributes of the items . 
The benefit of these approaches is that many non‐product features related to utility , such as delivery time , can be incorporated in the recommendation process . 
However , such systems are limited by the need for high user involvement ( Burke , 2002 ; Pu , Faltings , Chen , Zhang , & Viappiani , 2011 ) . 
Users are required to input the utility function by looking at , selecting and weighing each feature of the preferred items , or to fill out interactive questionnaires , before going into recommendations . 
Although our proposed method also tries to maximize the utility of the recommended apps , the underlying mechanism is totally different . 
Instead of asking the users to explicitly input the utility function , our method automatically infers users ’ requirements by constructing and analyzing the Functionality Graph , without user involvement . 
Therefore , our approach is more feasible than the utility‐based systems for dealing with a huge number of app functionalities . 
A few studies propose extending traditional recommendation algorithms and adapting them to the app domain . 
For example , AppJoy ( Yan & Chen , 2011 ) replaces the user ratings in traditional RSs with usage scores composed by recency , frequency and duration , and then performs item‐based CF recommendation . 
Lin , Sugiyama , Kan , and Chua ( 2013 ) propose extending the model‐based RS by constructing latent user models from apps ’ twitter followers , addressing the cold‐start problem of app recommendation . 
B. Liu et al . 
( 2015 ) consider users ’ privacy preferences in personalized app recommendations . 
Hybrid methods also exist . 
For example , Xu et al . 
( 2014 ) report a multiobject approach to evolve existing mobile app RSs . 
Although these solutions have proven to be effective to some extent in recommending apps , they do not consider much about the unique characteristics of apps . 
Noticing this limitation , some researchers have shifted their focus to a unique characteristic of mobile apps—context , and a few context‐aware systems have been proposed in the app domain . 
Such systems record users ’ context information , for example , physical location , at a particular time and then enhance app recommendation by exploiting the collected context information ( Q. Liu et al. , 2013 ) . 
For example , Böhmer , Bauer , and Krüger ( 2010 ) explored the design space for context‐aware app recommendation and developed a prototype app RS on the Android platform called Appazaar . 
The Djinn model introduced by Karatzoglou , Baltrunas , Church , and Böhmer ( 2012 ) utilizes the user‐app‐context relationship using tensor factorization , providing a new context‐aware CF approach for app recommendation . 
Shi et al . 
( 2012 ) also apply tensor factorization to integrate implicit feedback data with contextual information , and they propose generating app recommendations by optimizing the ranking ( i.e. , MAP ) . 
Context‐aware app RSs are highlighted because they consider one important feature of mobile app , that is , context information . 
Such systems show better performance than traditional methods in recommending apps . 
However , context information is very difficult to collect , because of privacy concerns and other constraints . 
It has been a significant limitation of context‐aware systems . 
To conclude , existing works on mobile app recommendation do consider some unique features in the app domain ; however , no reported work has been found which both recommends apps at the functionality level and avoids redundant recommendations . 
These gaps will be addressed with our proposed method . 
PageRank ( Page , Brin , Motwani , & Winograd , 1999 ) , a graph‐based ranking algorithm proposed by Google , has been successfully applied in analyzing the link‐structure of the World Wide Web . 
The objective of PageRank is to determine the importance of a given webpage on the web hyperlink structure . 
The basic assumption of PageRank is that a web page is more likely to be authoritative if it is linked to by many other authoritative pages . 
The implementation of PageRank is based on a “ voting ” mechanism . 
If a webpage links to another page , it denotes a vote to that target page . 
Moreover , the weight of the vote is determined by the importance of the webpage which gives the vote . 
Finally , the greater the weight of the vote a webpage receives , the more important it is . 
The final weight , that is , the PageRank score , of a webpage is determined by a random walk process which iterates the voting process throughout each node in the graph until it converges . 
Based on PageRank , many variants in different domains have been proposed . 
For example , Mihalcea and Tarau ( 2004 ) propose a graph‐based ranking model called TextRank for keyword and sentence extraction in the domain of natural language processing . 
In the TextRank model , each word is modelled as a vertex , and the edges in graph represent the concurrence of words in the document . 
Jeh and Widom ( 2003 ) introduce the personalized PageRank vector into the original model and propose a personalized version of PageRank , which is able to capture user preference . 
FolkRank , proposed by Hotho , Jäschke , Schmitz , Stumme , and Althoff ( 2006 ) , is an adaption of the PageRank algorithm for folksonomy ranking and searching . 
FolkRank employs a differential approach to compute a FolkRank score by taking the difference between the personalized PageRank score and the original PageRank score . 
Graph‐based approaches , such as PageRank , are good at exploring transitive associations in the data ( Huang , 2004 ) . 
The potential value of transitive associations for the data sparsity problem in recommender systems has been highlighted by many researchers in this field ( Guan , Bu , Mei , Chen , & Wang , 2009 ; Huang , 2004 ; Kim & El Saddik , 2011 ) . 
In our context , generally , users install only a small number of apps on their devices , making the usage data relatively sparse . 
With the help of graph‐based models , the sparsity problem can be alleviated by utilizing the transitive association among the functional aspects of the apps . 
For this purpose , our proposed method combines and adapts TextRank and FolkRank in the context of app functionality prediction , and we call it AppRank . 
The details of our adaption will be provided in the ensuing sections . 
We are interested in helping mobile app users discover new functionalities they may need , and recommending apps that can truly meet their requirements . 
Our proposed method is motivated by users ’ real‐life behavior of selecting mobile apps . 
When choosing an app to install , a user usually first considers whether the app provides the functionalities he or she needs by reading the app 's description . 
If there are many alternatives providing similar functionalities , the user may try each of them and evaluate them on other nonfunctional aspects ( e.g. , UI design , ease of use , power consumption ) , and then select the most preferred one to use . 
At a high level , our method automates this process through three main steps : ( a ) knowing all the functionalities provided by the apps that a user has been using ; ( b ) predicting what other functionalities this user may need ; and ( c ) helping the user select better apps providing these desired functionalities . 
One of the most outstanding features that differentiate our method from existing works is that we generate recommendations at the functionality level , truly capturing users ’ functional requirements . 
To achieve our goal , the most important problem we need to solve is obtaining the functionalities of each app . 
An intuitive solution is to extract app functionalities from their textual descriptions . 
App descriptions have the advantage of using more formal vocabulary and containing less noisy content , but we quickly realize that descriptions are short texts wherein functionalities may not be repeatedly stated . 
Most of the traditional keyword extraction techniques ( usually based on term frequency ) are designed for long articles , which may not be effective when applied to app descriptions . 
Fortunately , researchers have found that item features are frequently mentioned in customer reviews . 
This motivates us to obtain app functionalities from user reviews . 
However , user reviews often contain a lot of noisy content that is not relevant to the app functionalities . 
To address this problem , we make good use of the app descriptions , from which we propose to construct a functionality vocabulary to filter out the noisy content in the user reviews . 
Then we perform frequency analysis on the user reviews , which helps to extract high quality feature words and phrases related to the app functionalities . 
Next , after acquiring the app functionalities , we propose a graph‐based ranking method to discover new functionalities for the users . 
A functionality cooccurrence graph which captures the global functionality usage patterns of all users is constructed , and functionality prediction is performed as spreading activation ( Huang , 2004 ) . 
A two‐stage PageRank approach can be employed to implement this activation‐spreading process : for each user , a small subset of nodes representing the functionalities in use are activated with high weights , and other potential associated functionality nodes are then activated by receiving the weights propagated along the functionality cooccurrence graph in the PageRank process . 
We also intelligently filter out apps with overlapping functionalities by a competition mechanism , therefore capturing user requirements and addressing the redundancy problem . 
The details of our proposed solution will be introduced in the following section . 
In this section , we will first show the architecture of our proposed solution , followed by the details of each component in the architecture . 
Our proposed app recommendation architecture is shown in Figure 1 . 
There are the following three main components in the architecture : App Data Crawler , Functionality Extractor , and App Recommender . 
We use the App Data Crawler to collect app descriptions and corresponding user reviews . 
From the collected data , app functionalities are then extracted by the Functionality Extractor . 
Finally , the App Recommender predicts new functionalities for the user , selects candidate apps to recommend , and intelligently filters out apps with overlapping functionalities . 
More details of each component will be given in the ensuing sections . 
App recommendation architecture . 
[ Color figure can be viewed at wileyonlinelibrary.com ] The main task of the crawler is to collect web pages containing app descriptions and user reviews from the app store . 
Figure 2 shows one of the app web pages . 
Because the needed content is embedded in HTML files , we develop an extractor to extract the textual content of app descriptions and user reviews . 
User ratings associated with reviews are also isolated . 
